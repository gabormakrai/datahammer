package dh.command.ml;

import java.util.HashMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import dh.algorithms.AbstractLearner;
import dh.algorithms.LearnerFactory;
import dh.command.AbstractCommand;
import dh.repository.Repository;
import dh.repository.Table;
import dh.repository.Model;

public class LearnerModel extends AbstractCommand {

	private static final Logger logger = LoggerFactory.getLogger(LearnerModel.class);

	public LearnerModel(Repository repository) {
		super(repository);
	}

	public void run(String inputTableName, String modelName, String learnerName, HashMap<String, String> learnerParameter) {

		Table table = getTable(inputTableName);

		AbstractLearner learner = LearnerFactory.create(learnerName);

		learner.initializeLearner(table, learnerParameter);

		Model m = learner.learnModel(modelName, table);

		if (m != null) {
			repository.getModels().put(modelName, m);
			logger.info("Model " + modelName + " saved to repository...");
		} else {
			throw new RuntimeException("There is no model generated by the learner...");
		}
	}
}
